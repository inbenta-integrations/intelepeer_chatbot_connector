<?php

namespace Inbenta\IntelepeerConnector\ExternalAPI;

use GuzzleHttp\Client as Guzzle;
use Psr\Http\Message\ResponseInterface;


class IntelepeerAPIClient
{
    public $from;
    public $type;

    public $fullName;
    public $email;
    public $extraInfo;

    public $apiSms = 'https://api.intelepeer.com';
    public $dnis;
    public $ani;
    public $flowId;
    public $config;

    /**
     * Intelepeer SDK constructor
     *
     * @param string $auth
     * @param array $request
     */
    public function __construct($request = null, $config = null)
    {
        $this->from = isset($request['idIntelepeer']) ? str_replace("+", "", $request['idIntelepeer']) : "";
        $this->type = isset($request['type']) ? $request['type'] : "";

        $this->flowId = isset($request['flowId']) ? $request['flowId'] : "";
        $this->dnis = isset($request['dnis']) ? $request['dnis'] : "";
        $this->ani = isset($request['idIntelepeer']) ? $request['idIntelepeer'] : "";

        $this->config = $config;
    }


    /**
     * Build an external session Id using the following pattern:
     * @param string $token
     * @return string|null
     */
    public static function buildExternalIdFromRequest(string $token)
    {
        $request = json_decode(file_get_contents('php://input'), true);

        $sessionPrefix = "";
        if (isset($_SERVER["HTTP_X_SESSION"]) && $_SERVER["HTTP_X_SESSION"] !== "") {
            $sessionPrefix = $_SERVER["HTTP_X_SESSION"];
        }
        if (isset($request['idIntelepeer']) && isset($_SERVER["HTTP_X_INTELEPEER_TOKEN"]) && $_SERVER["HTTP_X_INTELEPEER_TOKEN"] === $token) {
            if (isset($request['flowId']) && isset($request['dnis'])) { //For SMS requests
                $dnis = str_replace("+", "", $request['dnis']);
                $ani = str_replace("+", "", $request['idIntelepeer']);
                return 'intelepeer-' . $request['flowId'] . '-' . $dnis . '-' . $ani;
            }

            $session = 'intelepeer-' . ($sessionPrefix !== "" ? $sessionPrefix . '-' : '');
            $session .= str_replace("+", "", $request['idIntelepeer']);
            return $session;
        }
        return null;
    }


    /**
     *   Retrieves the flow id from the external ID generated by the getExternalId method
     */
    public static function getFlowIdFromExternalId($externalId)
    {
        $intelepeerInfo = explode('-', $externalId);
        if (array_shift($intelepeerInfo) == 'intelepeer') {
            return $intelepeerInfo[0];
        }
        return null;
    }

    /**
     *   Retrieves the DNIS from the external ID generated by the getExternalId method
     */
    public static function getDnisFromExternalId($externalId)
    {
        $intelepeerInfo = explode('-', $externalId);
        if (array_shift($intelepeerInfo) == 'intelepeer') {
            return "+" . $intelepeerInfo[1];
        }
        return null;
    }

    /**
     *   Retrieves the ANI from the external ID generated by the getExternalId method
     */
    public static function getAniFromExternalId($externalId)
    {
        $intelepeerInfo = explode('-', $externalId);
        if (array_shift($intelepeerInfo) == 'intelepeer') {
            return "+" . $intelepeerInfo[2];
        }
        return null;
    }

    /**
     * Set full name attribute
     *
     * @param String $fullName
     * @return void
     */
    public function setFullName($fullName)
    {
        $this->fullName = $fullName;
    }

    /**
     * Set extra info attributes
     *
     * @param Array $extraInfo
     * @return void
     */
    public function setExtraInfo($extraInfo)
    {
        $this->extraInfo = $extraInfo;
    }

    /**
     * Set email attribute
     *
     * @param String $email
     * @return void
     */
    public function setEmail($email)
    {
        $this->email = $email;
    }

    /**
     * Get the fullname attribute
     * @return string
     */
    public function getFullName()
    {
        return $this->fullName;
    }

    /**
     *   Returns the user email or a default email made with the external ID
     *   @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     *   Returns the extra info data
     *   @return Array
     */
    public function getExtraInfo()
    {
        return $this->extraInfo;
    }

    /**
     *   Generates the external id used by HyperChat to identify one user as external.
     *   This external id will be used by HyperChat adapter to instance this client class from the external id
     */
    public function getExternalId()
    {
        $dnis = str_replace("+", "", $this->dnis);
        $ani = str_replace("+", "", $this->ani);
        return 'intelepeer-' . $this->flowId . '-' . $dnis . '-' . $ani;
    }

    /**
     * Set sender SMS info (from Hyperchat)
     * @param string $flowId
     * @param string $dnis
     * @param string $ani
     * @param string $type
     */
    public function setSenderFromId(string $flowId, string $dnis, string $ani, string $type)
    {
        $this->type = $type;
        $this->flowId = $flowId;
        $this->dnis = $dnis;
        $this->ani = $ani;
    }

    /**
     * Send an outgoing message.
     *
     * @param array $message
     * 
     */
    private function send(string $message, string $phoneToTransfer = "")
    {
        $phoneToTransfer = trim($phoneToTransfer) === "" ? "-" : $phoneToTransfer;
        $response = [
            "message" => $message,
            "phoneToTransfer" => $phoneToTransfer
        ];

        header('Content-Type: application/json');
        echo json_encode($response);
        die;
    }

    /**
     * Sends a message to Intelepeer. Needs a message formatted with the Intelepeer notation
     *
     * @param  Array $message
     */
    public function sendMessage(string $message, string $phoneToTransfer = "")
    {
        $messageSend = false;
        $text = trim($message);
        if ($text !== "") {
            $text = strpos($text, ".") === 0 ? substr($text, 1, strlen($text)) : $text;
            $messageSend = $this->send(trim($text), trim($phoneToTransfer));
        }
        return $messageSend;
    }

    /**
     *   Method needed
     */
    public function showBotTyping($show = true)
    {
        return true;
    }


    /**
     * Sends a message to Intelepeer. Needs a message formatted with the Intelepeer notation
     */
    public function sendTextMessage($text)
    {
        $this->sendToAPI($text);
        return true;
    }


    /**
     * Send an outgoing message.
     *
     * @param string $message
     * @return \Psr\Http\Message\ResponseInterface
     */
    public function sendToAPI(string $message)
    {
        $params = [
            "ANI" => $this->ani,
            "DNIS" => $this->dnis,
            "flowId" => $this->flowId,
            "AGENTMESSAGE" => $message,
        ];
        $response = $this->intelepeerAPIRequest('POST', '/_rest/v4/sfgen/apitriggers', $params);
        return $response;
    }

    /**
     * Send a request to the Intelepeer API
     * 
     * @param string $method
     * @param string $uri
     * @param array $options
     * @return ResponseInterface
     */
    protected function intelepeerAPIRequest($method, $uri, array $options)
    {
        $guzzle = new Guzzle([
            'base_uri' => $this->apiSms,
        ]);
        $params = [
            'form_params' => $options,
            //'headers' => ['AuthToken' => $this->config->smsToken]
        ];
        $response = $guzzle->request($method, $uri, $params);
        //print_r(json_decode($response->getBody()->getContents()));
        return $response;
    }
}
